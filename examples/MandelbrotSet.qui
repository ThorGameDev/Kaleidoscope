extern double putchard(i8 char);_

def double printdensity(i16 d)
{
	if (d > 8)
	{
		putchard(32);
	};
	else if (d > 4)
	{
		putchard(46);
	};
	else if (d > 2)
	{
		putchard(43);
	};
	else
	{
		putchard(42);
	};
};_

{
	printdensity(1:i16);
	printdensity(2:i16);
	printdensity(3:i16); 
	printdensity(4:i16);
	printdensity(5:i16); 
	printdensity(9:i16); 
};_

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def i16 mandelconverger(double real, double imag, i16 iters, double creal, double cimag)
{
	if (iters > 255 | (real*real + imag*imag > 4))
	{
		iters
	}
	else
	{
		mandelconverger(real*real - imag*imag + creal,
			2*real*imag + cimag,
			iters+1, creal, cimag)
	}
}_

# Return the number of iterations required for the iteration to escape
def i16 mandelconverge(double real, double imag)
    mandelconverger(real, imag, 0:i16, real, imag)_

# Compute and plot the mandelbrot set with the specified 2 dimensional range
# info.
def double mandelhelp(double xmin, double xmax, double xstep, double ymin, double ymax, double ystep) 
{
	for (y = ymin; y < ymax; ystep )
	{
		for (x=xmin; x < xmax; xstep) 
		{
			printdensity(mandelconverge(x,y));
		};
		putchard(10);
	};    
};_

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def double mandel(double realstart, double imagstart, double realmag, double imagmag)
{
	mandelhelp(realstart, realstart+realmag*78, realmag,
		imagstart, imagstart+imagmag*40, imagmag);
};_

mandel(-2.3, -1.3, 0.05, 0.07);_
mandel(-2, -1, 0.02, 0.04);_
mandel(-0.9, -1.4, 0.02, 0.03);_
