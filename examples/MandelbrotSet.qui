extern double putchard(i8 char);_

def float printdensity(i16 d)
{
	if (d > 8)
	{
		putchard(32);
	};
	else if (d > 4)
	{
		putchard(46);
	};
	else if (d > 2)
	{
		putchard(43);
	};
	else
	{
		putchard(42);
	};
};_

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def i16 mandelconverger(float real, float imag, i16 iters, float creal, float cimag)
{
	if (iters > 255 | (real*real + imag*imag > 4))
	{
		iters
	}
	else
	{
		mandelconverger(real*real - imag*imag + creal,
			2*real*imag + cimag,
			iters+1, creal, cimag)
	}
}_
# Return the number of iterations required for the iteration to escape
def i16 mandelconverge(float real, float imag)
    mandelconverger(real, imag, 0:i16, real, imag)_

# Compute and plot the mandelbrot set with the specified 2 dimensional range
# info.
def float mandelhelp(float xmin, float xmax, float xstep, float ymin, float ymax, float ystep) 
{
	for (float y = ymin; y < ymax; y = y + ystep )
	{
		for (float x = xmin; x < xmax; x =x + xstep) 
		{
			printdensity(mandelconverge(x,y));
		};
		putchard(10);
	};    
};_

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def float mandel(float realstart, float imagstart, float realmag, float imagmag)
{
	mandelhelp(realstart, realstart+realmag*78, realmag,
		imagstart, imagstart+imagmag*40, imagmag);
};_

mandel(-2.3:f, -1.3:f, 0.05:f, 0.07:f);_
mandel(-2.0:f, -1.0:f, 0.02:f, 0.04:f);_
mandel(-0.9:f, -1.4:f, 0.02:f, 0.03:f);_
